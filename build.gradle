buildscript {
    apply from: 'gradle/dependencies.gradle'

    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        classpath gradle_plugins.values()
    }
}

plugins {
    id 'java'
    id "com.github.ben-manes.versions" version "0.52.0"
    id 'org.jreleaser' version '1.18.0'
}

jreleaser {
    release {
        github {
            update {
                enabled = true
            }
        }
    }
    project {
        snapshot {
            fullChangelog = true
        }
    }
    gitRootSearch = true
    signing {
        active = 'ALWAYS'
        armored = true
    }
    deploy {
        maven {
            github {
                app {
                    snapshotSupported = true
                    active = 'ALWAYS'
                    url = "https://maven.pkg.github.com/otto-de/edison-microservice"
                    stagingRepository('build/staging-deploy')
                }
            }
            mavenCentral {
                app {
                    snapshotSupported = false
                    active = 'ALWAYS'
                    url = 'https://central.sonatype.com/api/v1/publisher'
                    stagingRepository('build/staging-deploy')

                    // Time to wait between state transition checks, in seconds.
                    // Defaults to `10`.
                    //
                    retryDelay = 10

                    // Maximum number of attempts to verify state transition.
                    // Defaults to `60`.
                    // Maven Central release can currently take up to 20 minutes, so we increased this to 120
                    //
                    maxRetries = 120
                }
            }
        }
    }
}

// USE SEMANTIC VERSIONING AS SPECIFIED HERE: http://semver.org/spec/v2.0.0.html
//
// Major Release: X.0.0-RELEASE: Breaking Changes. Should be avoided if possible, or planned for future release.
// Minor Release: 0.X.0-RELEASE: Additional Features, updates from minor releases in Spring
// Micro Release: 0.0.X-RELEASE: Bugfixes, non-breaking changes, updates from micro releases in Spring
//
// DO NOT FORGET TO DOCUMENT CHANGES IN CHANGELOG.md
//
// Add a GitHub release for every new release: https://github.com/otto-de/edison-microservice/releases
// Publish artifacts to sonatype by executing the release.sh script. Don't publish packages to github.
//
//
def edison_version = "3.4.4-SNAPSHOT"
//
//
//

repositories {
    mavenCentral()
    maven { url 'http://repo.spring.io/libs-snapshot' }
}

apply from: "${rootDir}/gradle/maven.gradle"

group = 'de.otto.edison'
version = edison_version

subprojects {
    apply plugin: 'eclipse'
    apply plugin: 'project-report'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'

    version = parent.version
    group = parent.group

    repositories {
        mavenCentral()
        mavenLocal()
    }

    // Override some Spring Boot default versions
    // see https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-customize-dependency-versions
    ext['mockito.version'] = test_versions.mockito_core
    ext['jackson.version'] = versions.jackson

    task allDeps(type: DependencyReportTask) {}

    apply from: "${rootDir}/gradle/idea.gradle"
    apply from: "${rootDir}/gradle/compile.gradle"
    apply from: "${rootDir}/gradle/test.gradle"
    apply from: "${rootDir}/gradle/jacoco.gradle"
    apply from: "${rootDir}/gradle/maven.gradle"
    apply from: "${rootDir}/gradle/signing.gradle"

    dependencies {
        compileOnly "org.springframework.boot:spring-boot-configuration-processor:${versions.spring_boot}"
        constraints {
            implementation 'junit:junit:4.13.2'
            // some dependencies bring junit 4.12 which has a security vulnerability
        }
        testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    }

    targetCompatibility = '17'
    sourceCompatibility = '17'

    /*
    // uncomment when using podman
    test {
        OperatingSystem os = DefaultNativePlatform.currentOperatingSystem;
        if (os.isMacOsX()) {
            environment "DOCKER_HOST", "unix:///tmp/podman.sock"
            environment "TESTCONTAINERS_RYUK_DISABLED", "true"
        }
    }
    */

    java {
        withJavadocJar()
        withSourcesJar()
    }

    if (!name.contains("example")) {
        publishing {
            publications {
                mavenJava(MavenPublication) {
                    pom {
                        url = 'https://github.com/otto-de/edison-microservice'
                        licenses {
                            license {
                                name = 'The Apache License, Version 2.0'
                                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }
                        developers {
                            developer {
                                id = 'MediaMarco'
                                name = 'Marco Geweke'
                                email = 'marco.geweke@gmail.com'
                            }
                            developer {
                                id = 'gsteinacker'
                                name = 'Guido Steinacker'
                            }
                        }
                        scm {
                            connection = 'scm:git:https://github.com/otto-de/edison-microservice.git'
                            developerConnection = 'scm:git:ssh://github.com/otto-de/edison-microservice.git'
                            url = 'https://github.com/otto-de/edison-microservice'
                        }
                    }
                }
            }

            repositories {
                maven {
                    // Our settingsDirectory is the project root dir.
                    // We want to 'publish' to the specified dir to have the artifacts uploaded with JReleaser from that location afterwards.
                    url = layout.settingsDirectory.dir('build/staging-deploy')
                }
            }
        }
    }

}

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'b', 'ea', 'pr'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]$qualifier[.\d-+]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

// This function converts Java version string '1.8' to '8'
static String compat(String src) {
    if (src.contains('.')) {
        src.substring(src.lastIndexOf('.') + 1)
    } else {
        src
    }
}
